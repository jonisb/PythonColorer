<!-- compound_stmt: if_stmt | while_stmt | for_stmt | try_stmt | with_stmt | funcdef | classdef | decorated | async_stmt -->
<scheme name="compound_stmt">
	<inherit scheme="if_stmt"/>
	<inherit scheme="while_stmt"/>
	<inherit scheme="for_stmt"/>
	<inherit scheme="try_stmt"/>
	<inherit scheme="with_stmt"/>
	<inherit scheme="funcdef"/>
	<inherit scheme="classdef"/>

<!-- decorated: decorators (classdef | funcdef | async_funcdef) -->
	<!-- <inherit scheme="decorated"/> -->
<!-- async_stmt: ASYNC (funcdef | with_stmt | for_stmt) -->
	<!-- <inherit scheme="async_stmt"/> -->
</scheme>

<!-- if_stmt: 'if' test ':' suite ('elif' test ':' suite)* ['else' ':' suite] -->
<scheme name="if_stmt">
	<block start="/^(%INDENT;*)\M(?{PairStart}if)/" end="/^($|\y1%INDENT;)?!/" scheme="if_block" region10="PairEnd"/>
	<block start="/^(%INDENT;*)\Melif/" end="/^($|\y1%INDENT;)?!/" scheme="elif_block"/>
	<block start="/^(%INDENT;*)\Melse/" end="/^($|\y1%INDENT;)?!/" scheme="else_block"/>
</scheme>

<scheme name="if_block">
	<block start="/~(if)\s*/" end="/\s*\M:/" scheme="test" region01="Keyword"/>
	<inherit scheme="suite"/>
</scheme>

<scheme name="elif_block">
	<block start="/~(elif)\s*/" end="/\s*\M:/" scheme="test" region01="Keyword"/>
	<inherit scheme="suite"/>
</scheme>

<scheme name="else_block">
	<regexp match="/~(else)\s*\M:/" region1="Keyword"/>
	<inherit scheme="suite"/>
</scheme>

<!-- while_stmt: 'while' test ':' suite ['else' ':' suite] -->
<scheme name="while_stmt">
	<block start="/^(%INDENT;*)\M(?{PairStart}while)/" end="/^($|\y1%INDENT;)?!/" scheme="while_block" region10="PairEnd"/>
	<block start="/^(%INDENT;*)\Melse/" end="/^($|\y1%INDENT;)?!/" scheme="else_block"/>
</scheme>

<scheme name="while_block">
	<block start="/~(while)/" end="/\s*\M:/" scheme="test" region01="Keyword"/>
	<inherit scheme="suite"/>
</scheme>

<!-- for_stmt: 'for' exprlist 'in' testlist ':' suite ['else' ':' suite] -->
<scheme name="for_stmt">
	<block start="/^(%INDENT;*)\M(?{PairStart}for)/" end="/^($|\y1%INDENT;)?!/" scheme="for_block" region10="PairEnd"/>
	<block start="/^(%INDENT;*)\Melse/" end="/^($|\y1%INDENT;)?!/" scheme="else_block"/>
</scheme>

<scheme name="for_block">
	<block start="/~(for)/" end="/\s*\M:/" scheme="for_block_body" region01="Keyword"/>
	<inherit scheme="suite"/>
</scheme>

<scheme name="for_block_body">
	<block start="/~(for)?#3\s*/" end="/\s*\M\bin\b/" scheme="exprlist"/>
	<block start="/\b(in)\b\s*/" end="/\s*\M:/" scheme="testlist" region01="Keyword"/>
</scheme>

<!-- try_stmt: ('try' ':' suite
           ((except_clause ':' suite)+
            ['else' ':' suite]
            ['finally' ':' suite] |
           'finally' ':' suite)) -->
<scheme name="try_stmt">
	<block start="/^(%INDENT;*)\M(?{PairStart}try)/" end="/^($|\y1%INDENT;)?!/" scheme="try_block" region10="PairEnd"/>
	<block start="/^(%INDENT;*)\Mexcept/" end="/^($|\y1%INDENT;)?!/" scheme="except_block"/>
	<block start="/^(%INDENT;*)\Melse/" end="/^($|\y1%INDENT;)?!/" scheme="else_block"/>
	<block start="/^(%INDENT;*)\Mfinally/" end="/^($|\y1%INDENT;)?!/" scheme="finally_block"/>
</scheme>

<scheme name="try_block">
	<regexp match="/~(try)\s*\M:/" region1="Keyword"/>
	<inherit scheme="suite"/>
</scheme>

<!--except_clause: 'except' [test ['as' NAME]]-->
<scheme name="except_block">
	<block start="/~(except)\s*/" end="/\s*\M:/" scheme="except_block_body" region01="Keyword"/>
	<inherit scheme="suite"/>
</scheme>

<scheme name="except_block_body">
	<inherit scheme="as_separated">
		<virtual scheme="def:empty" subst-scheme="test"/>
	</inherit>
</scheme>

<scheme name="finally_block">
	<regexp match="/~(finally)\s*\M:/" region1="Keyword"/>
	<inherit scheme="suite"/>
</scheme>

<!-- with_stmt: 'with' with_item (',' with_item)*  ':' suite -->
<scheme name="with_stmt">
	<block start="/^(%INDENT;*)\M(?{PairStart}with)/" end="/^($|\y1%INDENT;)?!/" scheme="with_block" region10="PairEnd"/>
</scheme>

<scheme name="with_block">
	<block start="/~(with)\s*/" end="/\s*\M:/" scheme="with_block2" region01="Keyword"/>
	<inherit scheme="suite"/>
</scheme>

<scheme name="with_block2">
	<inherit scheme="comma_separated">
		<virtual scheme="def:empty" subst-scheme="with_item"/>
	</inherit>
</scheme>

<!-- with_item: test ['as' expr] -->
<scheme name="with_item">
	<inherit scheme="as_separated">
		<virtual scheme="def:empty" subst-scheme="test"/>
		<virtual scheme="NAME" subst-scheme="expr"/>
	</inherit>
</scheme>

<!--
funcdef: 'def' NAME parameters ['->' test] ':' suite

parameters: '(' [typedargslist] ')'

typedargslist:
(
	tfpdef ['=' test] ( ',' tfpdef ['=' test] )*
	[
		','
		[
			'*' [tfpdef] ( ',' tfpdef ['=' test] )* [',' ['**' tfpdef [',']]]
			|
			'**' tfpdef [',']
		]
	]
  	|
  	'*' [tfpdef] ( ',' tfpdef ['=' test] )* [',' ['**' tfpdef [',']]]
  	|
  	'**' tfpdef [',']
)

tfpdef: NAME [':' test]
-->

<scheme name="funcdef">
	<block start="/^(%INDENT;*)\b\M((?{PairStart}def))/" end="/^($|\y1%INDENT;)?!/" scheme="def_block" region02="Keyword" region10="PairEnd"/>
</scheme>

<scheme name="def_block">
	<block start="/~(def)\s*/" end="/\s*\M:/" scheme="def_block2"/>
	<inherit scheme="suite"/>
</scheme>

<scheme name="def_block2">
	<block start="/\(/" end="/\)/" scheme="typedargslist" region00="Delimiter" region10="Delimiter"/>
	<inherit scheme="NAME"/>
</scheme>

<scheme name="typedargslist">
	<block start="/\s*(\*\*)\s*/" end="//" scheme="tfpdef" region01="Operator"/>
	<block start="/\s*(\*)\s*/" end="//" scheme="tfpdef" region01="Operator"/>
	<block start="/\s*(=)\s*/" end="//" scheme="test" region01="Delimiter"/>
	<block start="/\s*(,)\s*/" end="//" scheme="typedargslist" region01="Delimiter"/>
	<inherit scheme="tfpdef"/>
</scheme>

<scheme name="tfpdef"> <!-- TODO -->
	<block start="/\s*(:)\s*/" end="//" scheme="test" region01="Delimiter"/>
	<inherit scheme="NAME"/>
</scheme>

<!-- classdef: 'class' NAME ['(' [arglist] ')'] ':' suite -->
<scheme name="classdef">
	<block start="/^(%INDENT;*)\b\M((?{PairStart}class))/" end="/^($|\y1%INDENT;)?!/" scheme="classdef_block" region02="Keyword" region10="PairEnd"/>
</scheme>

<scheme name="classdef_block">
	<block start="/~(class)\s*/" end="/\s*\M:/" scheme="classdef_block2"/>
	<inherit scheme="suite"/>
</scheme>

<scheme name="classdef_block2">
	<block start="/\(/" end="/\)/" scheme="arglist" region00="Delimiter" region10="Delimiter"/>
	<inherit scheme="NAME"/>
</scheme>
